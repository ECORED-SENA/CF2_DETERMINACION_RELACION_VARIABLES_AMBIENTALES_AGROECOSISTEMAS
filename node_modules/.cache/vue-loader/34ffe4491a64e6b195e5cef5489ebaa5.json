{"remainingRequest":"/home/runner/work/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/src/views/Tema2.vue?vue&type=template&id=406389bc&lang=pug","dependencies":[{"path":"/home/runner/work/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/src/views/Tema2.vue","mtime":1743796293094},{"path":"/home/runner/work/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/CF2_DETERMINACION_RELACION_VARIABLES_AMBIENTALES_AGROECOSISTEMAS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDIKICAgICAgaDEgRGVmaW5pY2nDs24gZGUgbGFzIHZhcmlhYmxlcyBhbWJpZW50YWxlcwogICAgCiAgICA8IS0tIEJMT1FVRSAxIC0tPgogICAgLnJvdy5oLTEwMC5hbGlnbi1pdGVtcy1jZW50ZXIudGV4dC10ZW1hMS1ibG9xdWUxLmQtZC1mbGV4CiAgICAgIC5jb2wtbGcKICAgICAgICBwLm1iLTAgUGFyYSBtYXlvciBjb21wcmVuc2nDs24gYSBjb250aW51YWNpw7NuLCBzZSBkZXNjcmliZW4gY2FkYSB1bmEgZGUgbGFzIHZhcmlhYmxlcyBhbWJpZW50YWxlcyBxdWUgcHVlZGVuIHRlbmVyIGluY2lkZW5jaWEgZW4gZWwgZGVzYXJyb2xsbyBkZSBsb3MgYWdyb2Vjb3Npc3RlbWFzLgogICAgICAuY29sLWxnLWF1dG8ucC0wCiAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5kLW5vbmUuZC14bC1ibG9jawogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvaW1nMS5wbmciIHN0eWxlPSJtYXgtd2lkdGg6IDQwMHB4IikubS1hdXRvCgogICAgPCEtLSBCTE9RVUUgMiAtLT4KICAgIC5yb3cuZm9uZG8tdGVtYTIKICAgICAgU2VwYXJhZG9yCiAgICAgICN0XzJfMS50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgICAgaDIgMi4xIFZhcmlhYmxlcyBhZ3JvY2xpbcOhdGljYXMKICAgICAgCiAgICAgIHAubWItNS5hanVzdGUtbW92aWwtYmxvcXVlNCBFbnRyZSBsYXMgdmFyaWFibGVzIGFncm9jbGltw6F0aWNhcyBtw6FzIGltcG9ydGFudGVzIGVzdMOhbjoKCiAgICAgIC5yb3cubWItNC5hanVzdGUtbW92aWwtYmxvcXVlNAogICAgICAgIC5jb2wteGwtMy5jb2wtbWQtNgogICAgICAgICAgLmNhamEtdGV4dC1pbWctdGVtYTEtYmxvcXVlMi5oLTEwMChkYXRhLWFvcz0iZmxpcC1sZWZ0IikKICAgICAgICAgICAgLmNvbC03CiAgICAgICAgICAgICAgZmlndXJlLm1iLTMKICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyL2ltZzEuc3ZnJywgYWx0PScnIHN0eWxlPSJtYXgtd2lkdGg6IDk1cHgiKS5tLWF1dG8KICAgICAgICAgICAgaDUubWItNC50ZXh0LWNlbnRlciBUZW1wZXJhdHVyYSAowrBDKQogICAgICAgICAgICBwIE1hZ25pdHVkIGbDrXNpY2EgcXVlIGV4cHJlc2EgZWwgZ3JhZG8gZGUgZnLDrW8gbyBjYWxvciBkZSBsb3MgY3VlcnBvcyBvIGRlbCBhbWJpZW50ZS4KICAgICAgICAuY29sLXhsLTMuY29sLW1kLTYuYWp1c3RlLTIKICAgICAgICAgIC5jYWphLXRleHQtaW1nLXRlbWExLWJsb3F1ZTIuaC0xMDAoZGF0YS1hb3M9ImZsaXAtbGVmdCIpCiAgICAgICAgICAgIC5jb2wtNwogICAgICAgICAgICAgIGZpZ3VyZS5tYi0zCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWcyLnN2ZycsIGFsdD0nJyBzdHlsZT0ibWF4LXdpZHRoOiA5NXB4IikubS1hdXRvCiAgICAgICAgICAgIGg1Lm1iLTQudGV4dC1jZW50ZXIgSHVtZWRhZCBSZWxhdGl2YSAoJSkKICAgICAgICAgICAgcCBDYW50aWRhZCBkZSB2YXBvciBkZSBhZ3VhIHByZXNlbnRlIGVuIGVsIGFpcmUgZW4gcmVsYWNpw7NuIGEgbGEgbcOheGltYSBwb3NpYmxlIHBhcmEgdW5hcyBjb25kaWNpb25lcyBkYWRhcyBkZSBwcmVzacOzbiB5IHRlbXBlcmF0dXJhLgogICAgICAgIC5jb2wteGwtMy5jb2wtbWQtNi5hanVzdGUtMQogICAgICAgICAgLmNhamEtdGV4dC1pbWctdGVtYTEtYmxvcXVlMi5oLTEwMChkYXRhLWFvcz0iZmxpcC1sZWZ0IikKICAgICAgICAgICAgLmNvbC03CiAgICAgICAgICAgICAgZmlndXJlLm1iLTMKICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyL2ltZzMuc3ZnJywgYWx0PScnIHN0eWxlPSJtYXgtd2lkdGg6IDk1cHgiKS5tLWF1dG8KICAgICAgICAgICAgaDUubWItNC50ZXh0LWNlbnRlciBQcmVjaXBpdGFjacOzbiAobW0pCiAgICAgICAgICAgIHAgQ2FudGlkYWQgZGUgbGx1dmlhcyBxdWUgc2UgcHJlc2VudGEgZW4gdW4gbHVnYXIgeSB0aWVtcG8gZGV0ZXJtaW5hZG8uIExhIHJlbGFjacOzbiBlbnRyZSBwcmVjaXBpdGFjacOzbiB5IHRlbXBlcmF0dXJhIGEgdHJhdsOpcyBkZWwgdGllbXBvIGNvbnN0aXR1eWVuIGxvcyBlc2NlbmFyaW9zIGRlIGNhbWJpbyBjbGltw6F0aWNvLgogICAgICAgIC5jb2wteGwtMy5jb2wtbWQtNi5hanVzdGUtMQogICAgICAgICAgLmNhamEtdGV4dC1pbWctdGVtYTEtYmxvcXVlMi5oLTEwMChkYXRhLWFvcz0iZmxpcC1sZWZ0IikKICAgICAgICAgICAgLmNvbC03CiAgICAgICAgICAgICAgZmlndXJlLm1iLTMKICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyL2ltZzQuc3ZnJywgYWx0PScnIHN0eWxlPSJtYXgtd2lkdGg6IDk1cHgiKS5tLWF1dG8KICAgICAgICAgICAgaDUubWItNC50ZXh0LWNlbnRlciBWZWxvY2lkYWQgZGVsIFZpZW50byAobS9zKQogICAgICAgICAgICBwIFJlbGFjacOzbiBkZSBsYSBkaXN0YW5jaWEgcmVjb3JyaWRhIHBvciBlbCBhaXJlIGNvbiByZXNwZWN0byBhbCB0aWVtcG8gZW1wbGVhZG8gZW4gcmVjb3JyZXJsYS4KCiAgICBwLm1iLTQgU2Vnw7puIGxhIEZBTyAoMjAyMSksIElERUFNICgyMDE4KSB5IE1pbmFncmljdWx0dXJhICgyMDI0KSwgbGFzIHZhcmlhYmxlcyBhZ3JvY2xpbcOhdGljYXMgcGVybWl0ZW4gaWRlbnRpZmljYXIgbGFzIGNvbmRpY2lvbmVzIGF0bW9zZsOpcmljYXMgcXVlIHB1ZWRlbiBhZmVjdGFyIGxhIHByb2R1Y2Npw7NuIGFncsOtY29sYSB5IGVsIGVxdWlsaWJyaW8gZGUgbG9zIGFncm9lY29zaXN0ZW1hcy4gQWxndW5vcyBkZSBsb3MgcHJpbmNpcGFsZXMgZmFjdG9yZXMgcXVlIGluZmx1eWVuIGVuIHN1IGRlc2Fycm9sbG8gaW5jbHV5ZW46CgogICAgLnJvdy5mb25kby1zbGlkZXIubWItNAogICAgICAuYWp1c3RlLXNsaWRlcgogICAgICAgIFNseWRlckEodGlwbz0iYiIpCiAgICAgICAgICAucm93LmgtMTAwLmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctNgogICAgICAgICAgICAgIGZpZ3VyZS5tYi0zCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWcyLnBuZycsIGFsdD0nJykKICAgICAgICAgICAgLmNvbC1sZy02Lm1iLTQKICAgICAgICAgICAgICBoNC5tYi00IFRlbXBlcmF0dXJhCiAgICAgICAgICAgICAgcCBJbmZsdXllIGVuIGxhIGdlcm1pbmFjacOzbiwgY3JlY2ltaWVudG8geSBkZXNhcnJvbGxvIGRlIGxvcyBjdWx0aXZvcy4gRGV0ZXJtaW5hIGxhIHRhc2EgZGUgZm90b3PDrW50ZXNpcyB5IHJlc3BpcmFjacOzbiBkZSBsYXMgcGxhbnRhcy4gVmFyaWFjaW9uZXMgZXh0cmVtYXMgcHVlZGVuIGFmZWN0YXIgbGEgcHJvZHVjY2nDs24gYWdyw61jb2xhIChoZWxhZGFzLCBzZXF1w61hcykuCiAgICAgICAgICAucm93LmgtMTAwLmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctNgogICAgICAgICAgICAgIGZpZ3VyZS5tYi0zCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWczLnBuZycsIGFsdD0nJykKICAgICAgICAgICAgLmNvbC1sZy02Lm1iLTQKICAgICAgICAgICAgICBoNC5tYi00IEh1bWVkYWQgcmVsYXRpdmEKICAgICAgICAgICAgICBwIEFmZWN0YSBsYSB0cmFuc3BpcmFjacOzbiBkZSBsYXMgcGxhbnRhcyB5IGxhIGV2YXBvdHJhbnNwaXJhY2nDs24gZGVsIHN1ZWxvLiBWYWxvcmVzIG11eSBhbHRvcyBwdWVkZW4gZmF2b3JlY2VyIGVuZmVybWVkYWRlcyBwb3IgaG9uZ29zLCBtaWVudHJhcyBxdWUgdmFsb3JlcyBiYWpvcyBwdWVkZW4gcHJvdm9jYXIgZXN0csOpcyBow61kcmljbyBlbiBsb3MgY3VsdGl2b3MuCiAgICAgICAgICAucm93LmgtMTAwLmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctNgogICAgICAgICAgICAgIGZpZ3VyZS5tYi0zCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWc0LnBuZycsIGFsdD0nJykKICAgICAgICAgICAgLmNvbC1sZy02Lm1iLTQKICAgICAgICAgICAgICBoNC5tYi00IFByZWNpcGl0YWNpw7NuCiAgICAgICAgICAgICAgcCBGYWN0b3IgY2xhdmUgcGFyYSBsYSBkaXNwb25pYmlsaWRhZCBkZSBhZ3VhIGVuIGxvcyBzdWVsb3MgeSBsYSBoaWRyYXRhY2nDs24gZGUgbG9zIGN1bHRpdm9zLiBFeGNlc29zIHB1ZWRlbiBjYXVzYXIgZXJvc2nDs24gZSBpbnVuZGFjaW9uZXMsIG1pZW50cmFzIHF1ZSBkw6lmaWNpdHMgZ2VuZXJhbiBzZXF1w61hcy4KICAgICAgICAgIC5yb3cuaC0xMDAuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy02CiAgICAgICAgICAgICAgZmlndXJlLm1iLTMKICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyL2ltZzUucG5nJywgYWx0PScnKQogICAgICAgICAgICAuY29sLWxnLTYubWItNAogICAgICAgICAgICAgIGg0Lm1iLTQgUmFkaWFjacOzbiBzb2xhcgogICAgICAgICAgICAgIHAgU3UgY2FudGlkYWQgeSBjYWxpZGFkIGFmZWN0YW4gZWwgY3JlY2ltaWVudG8geSByZW5kaW1pZW50byBkZSBsb3MgY3VsdGl2b3MuIFVuYSByYWRpYWNpw7NuIGluc3VmaWNpZW50ZSBwdWVkZSByZWR1Y2lyIGxhIHByb2R1Y2Npw7NuLCBtaWVudHJhcyBxdWUgdW5hIGV4Y2VzaXZhIHB1ZWRlIHByb3ZvY2FyIGVzdHLDqXMgdMOpcm1pY28uCiAgICAgICAgICAucm93LmgtMTAwLmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctNgogICAgICAgICAgICAgIGZpZ3VyZS5tYi0zCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWc2LnBuZycsIGFsdD0nJykKICAgICAgICAgICAgLmNvbC1sZy02Lm1iLTQKICAgICAgICAgICAgICBoNC5tYi00IFZpZW50b3MKICAgICAgICAgICAgICBwIEluZmx1eWUgZW4gbGEgZGlzcGVyc2nDs24gZGUgc2VtaWxsYXMsIHBvbGluaXphY2nDs24geSBldmFwb3JhY2nDs24gZGVsIGFndWEgZGVsIHN1ZWxvLiBQdWVkZSBmYXZvcmVjZXIgbGEgZXJvc2nDs24gZGVsIHN1ZWxvLiBWaWVudG9zIGZ1ZXJ0ZXMgcHVlZGVuIGFmZWN0YXIgZXN0cnVjdHVyYXMgYWdyw61jb2xhcyBlIGluY3JlbWVudGFyIGxhIGV2YXBvcmFjacOzbiBkZWwgYWd1YSBkaXNwb25pYmxlLgogICAgICAgICAgLnJvdy5oLTEwMC5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLTYKICAgICAgICAgICAgICBmaWd1cmUubWItMwogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvaW1nNy5wbmcnLCBhbHQ9JycpCiAgICAgICAgICAgIC5jb2wtbGctNi5tYi00CiAgICAgICAgICAgICAgaDQubWItNCBQcmVzacOzbiBhdG1vc2bDqXJpY2EKICAgICAgICAgICAgICBwIEFmZWN0YSBlbCBjb21wb3J0YW1pZW50byBkZWwgY2xpbWEgeSBsYSBmb3JtYWNpw7NuIGRlIGZlbsOzbWVub3MgbWV0ZW9yb2zDs2dpY29zIHF1ZSBvY2FzaW9uYW4gdmFyaWFiaWxpZGFkIGNsaW3DoXRpY2EuIENhbWJpb3MgZW4gbGEgcHJlc2nDs24gcHVlZGVuIGluZmx1aXIgZW4gbGEgdGVtcGVyYXR1cmEgeSBodW1lZGFkIGRlbCBhbWJpZW50ZS4KICAgICAgICAgIC5yb3cuaC0xMDAuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy02CiAgICAgICAgICAgICAgZmlndXJlLm1iLTMKICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyL2ltZzgucG5nJywgYWx0PScnKQogICAgICAgICAgICAuY29sLWxnLTYubWItNAogICAgICAgICAgICAgIGg0Lm1iLTQgRXZhcG90cmFuc3BpcmFjacOzbgogICAgICAgICAgICAgIHAgUmVsYWNpb25hZGEgY29uIGxhIGRpc3BvbmliaWxpZGFkIGRlIGFndWEgcGFyYSBsb3MgY3VsdGl2b3MuIERldGVybWluYSBsYSBuZWNlc2lkYWQgZGUgcmllZ28gZW4gbG9zIHNpc3RlbWFzIGRlIHByb2R1Y2Npw7NuIGFncsOtY29sYS4KICAgICAgICAgIC5yb3cuaC0xMDAuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy02CiAgICAgICAgICAgICAgZmlndXJlLm1iLTMKICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyL2ltZzkucG5nJywgYWx0PScnKQogICAgICAgICAgICAuY29sLWxnLTYubWItNAogICAgICAgICAgICAgIGg0Lm1iLTQgTnVib3NpZGFkCiAgICAgICAgICAgICAgcCBJbmZsdXllIGVuIGxhIGNhbnRpZGFkIGRlIHJhZGlhY2nDs24gc29sYXIgcXVlIGxsZWdhIGEgbGEgc3VwZXJmaWNpZSB0ZXJyZXN0cmUuIFVuIGV4Y2VzbyBkZSBudWJvc2lkYWQgcHVlZGUgcmVkdWNpciBsYSBmb3Rvc8OtbnRlc2lzLCBtaWVudHJhcyBxdWUgdW5hIG51Ym9zaWRhZCBlc2Nhc2EgcHVlZGUgYXVtZW50YXIgbGEgZXZhcG9yYWNpw7NuIHkgbGEgdGVtcGVyYXR1cmEuCgogICAgcCBBZGVtw6FzIGRlIGVzdGFzIHZhcmlhYmxlcywgZXMgaW1wb3J0YW50ZSBjb25vY2VyIGVuIGRldGVybWluYWRvcyBjYXNvcyBlbCBjb21wb3J0YW1pZW50byBkZSB2YXJpYWJsZXMgY29tbyBlbCBjYXVkYWwgZGUgZnVlbnRlcyBow61kcmljYXMgYWxlZGHDsWFzLCByYWRpYWNpw7NuIHNvbGFyLCBicmlsbG8gc29sYXIsIHJvc2EgZGUgdmllbnRvcywgaG9yYXMgYnJpbGxvIHNvbGFyIGVudHJlIG90cmFzLgoKICAgIFNlcGFyYWRvcgogICAgPCEtLSBCTE9RVUUgMyAtLT4KICAgICN0XzJfMi50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIGgyIDIuMiBEZWZpbmljacOzbiBkZSBsYXMgdmFyaWFibGVzIGFtYmllbnRhbGVzIGRlbCBhZ3VhCiAgICAKICAgIHAubWItNC5hanVzdGUtbW92aWwtYmxvcXVlNCBMYSBjYWxpZGFkIGRlbCBhZ3VhIGVzIGVsIHJlc3VsdGFkbyBkZSBjb21wYXJhciBsYXMgY2FyYWN0ZXLDrXN0aWNhcyBmw61zaWNhcywgcXXDrW1pY2FzIHkgbWljcm9iaW9sw7NnaWNhcyBlbmNvbnRyYWRhcyBlbiBlbCBhZ3VhIGNvbiBlbCBjb250ZW5pZG8gZGUgbGFzIG5vcm1hcyBxdWUgcmVndWxhbiBsYSBtYXRlcmlhIChJREVBTSwgMjAxOCkuIExhcyB2YXJpYWJsZXMgbyBwYXLDoW1ldHJvcyBkZSBjYWxpZGFkIGRlIGFndWEgcmVjb21lbmRhZG9zIHBhcmEgcmVhbGl6YXIgZWwgbW9uaXRvcmVvIHNlIGRlZmluZW4gYSBjb250aW51YWNpw7NuIChJREVBTSwgMjAxOCk6CgogICAgLnRpdHVsby1zZXh0by5jb2xvci1hY2VudG8tY29udGVuaWRvLm1iLTMKICAgICAgaDUgVGFibGEgMS4KICAgICAgc3BhbiBEZWZpbmljacOzbiBkZSB2YXJpYWJsZXMgYXNvY2lhZGFzIGEgbGEgY2FsaWRhZCBkZWwgYWd1YQogICAgCiAgICAudGFibGEtYS5hanVzdGUtdGFibGEubWItNChkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgIHRhYmxlCiAgICAgICAgY2FwdGlvbiBOb3RhLiBUb21hZG8geSBhZGFwdGFkbyBkZSBJREVBTSAoMjAxOCkKICAgICAgICB0aGVhZAogICAgICAgICAgdHIKICAgICAgICAgICAgdGggQ2xhc2lmaWNhY2nDs24KICAgICAgICAgICAgdGggVmFyaWFibGUgZGUgY2FsaWRhZCBkZSBhZ3VhCiAgICAgICAgICAgIHRoIFVuaWRhZAogICAgICAgICAgICB0aCBEZWZpbmljacOzbgogICAgICAgIHRib2R5CiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBWYXJpYWJsZXMgPGVtPkluIFNpdHU8L2VtPgogICAgICAgICAgICB0ZCBwSAogICAgICAgICAgICB0ZCBVbmlkYWRlcyBkZSBwSAogICAgICAgICAgICB0ZC5hanVzdGUtYWxpZ24gTsO6bWVybyBkZSBpb25lcyBsaWJyZXMgZGUgaGlkcsOzZ2VubyAoSCspIGVuIHVuYSBzdXN0YW5jaWEuIEVsIHBIIHNpcnZlIGNvbW8gdW4gaW5kaWNhZG9yIHF1ZSBjb21wYXJhIGFsZ3Vub3MgZGUgbG9zIGlvbmVzIG3DoXMgc29sdWJsZXMgZW4gYWd1YS4gRWwgcEggYWNlcHRhZG8gcGFyYSBhZ3VhIGRlIHVzbyBhZ3LDrWNvbGEgZXN0w6EgZW50cmUgNCw1IHkgOSwwLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgVmFyaWFibGVzIDxlbT5JbiBTaXR1PC9lbT4KICAgICAgICAgICAgdGQgQ29uZHVjdGl2aWRhZCAoQ0UpCiAgICAgICAgICAgIHRkIMK1cy9jbQogICAgICAgICAgICB0ZC5hanVzdGUtYWxpZ24gRWwgZ3JhZG8gZGUgc2FsaW5pZGFkIHNlIG1pZGUgcG9yIHN1IGNvbmR1Y3RpdmlkYWQgZWzDqWN0cmljYS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIFZhcmlhYmxlcyA8ZW0+SW4gU2l0dTwvZW0+CiAgICAgICAgICAgIHRkIE94w61nZW5vIERpc3VlbHRvIChPRCkKICAgICAgICAgICAgdGQgbWcvTAogICAgICAgICAgICB0ZC5hanVzdGUtYWxpZ24gQ2FudGlkYWQgZGUgb3jDrWdlbm8gZGlzdWVsdG8gZW4gZWwgYWd1YS4gU2kgc2UgZW5jdWVudHJhIHVuYSBjb25jZW50cmFjacOzbiBkZSA1IGEgNiBwcG0sIGhheSBveMOtZ2VubyBzdWZpY2llbnRlIHBhcmEgbGEgbWF5b3IgcGFydGUgZGUgbGFzIGVzcGVjaWVzLiBNZW5vciBkZSAzIHBwbSwgZXMgZGHDsWlubyBwYXJhIGVsIGVjb3Npc3RlbWEuIEEgcGFydGlyIGRlIGVzdGUgcHVudG8gaGFjaWEgYWJham8sIGVsIGVjb3Npc3RlbWEgZXhwZXJpbWVudGEgaGlwb3hpYS4gTWVub3IgZGUgMiBwcG0sIGVzIGZhdGFsIHBhcmEgbGEgbWF5b3IgcGFydGUgZGUgbGFzIGVzcGVjaWVzIChhbm94aWEpLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgVmFyaWFibGVzIDxlbT5JbiBTaXR1PC9lbT4KICAgICAgICAgICAgdGQgUG9yY2VudGFqZSBkZSBzYXR1cmFjacOzbiBkZSBveMOtZ2VubwogICAgICAgICAgICB0ZCAlCiAgICAgICAgICAgIHRkLmFqdXN0ZS1hbGlnbiBPeMOtZ2VubyBkaXN1ZWx0byBlbiBtZy9MLCBkaXZpZGlkbyBwb3IgZWwgMTAwICUgZGVsIHZhbG9yIGRlIG94w61nZW5vIGRpc3VlbHRvIHBhcmEgZWwgYWd1YSAoYSBsYSBtaXNtYSB0ZW1wZXJhdHVyYSB5IHByZXNpw7NuIGRlbCBhaXJlKS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEbDrXNpY29zCiAgICAgICAgICAgIHRkIFPDs2xpZG9zIHN1c3BlbmRpZG9zIHRvdGFsZXMKICAgICAgICAgICAgdGQgbWcvTAogICAgICAgICAgICB0ZC5hanVzdGUtYWxpZ24gU3VtYSBkZSBsb3MgdmFsb3JlcyBkZWwgVG90YWwgZGUgU8OzbGlkb3MgZW4gU3VzcGVuc2nDs24gKFNTVCkgcG9yIHB1bnRvIGRlIG11ZXN0cmVvLCBkaXZpZGlkbyBwb3IgZWwgbsO6bWVybyBkZSBwdW50b3MgZGUgbXVlc3RyZW8uIExvcyBTw7NsaWRvcyBTdXNwZW5kaWRvcyBUb3RhbGVzIChTU1QpIGhhY2VuIHJlZmVyZW5jaWEgYWwgbWF0ZXJpYWwgcGFydGljdWxhZG8gcXVlIHNlIG1hbnRpZW5lIGVuIHN1c3BlbnNpw7NuIGVuIGxhcyBjb3JyaWVudGVzIGRlIGFndWEgc3VwZXJmaWNpYWwgeS9vIHJlc2lkdWFsLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgRsOtc2ljb3MKICAgICAgICAgICAgdGQgU8OzbGlkb3MgZGlzdWVsdG9zIHRvdGFsZXMKICAgICAgICAgICAgdGQgbWcvTAogICAgICAgICAgICB0ZC5hanVzdGUtYWxpZ24gU3VtYSBkZSB0b2RvcyBsb3MgbWluZXJhbGVzLCBtZXRhbGVzLCB5IHNhbGVzIGRpc3VlbHRvcyBlbiBlbCBhZ3VhLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgRsOtc2ljb3MKICAgICAgICAgICAgdGQgVHVyYmlkZXoKICAgICAgICAgICAgdGQgVU5UCiAgICAgICAgICAgIHRkLmFqdXN0ZS1hbGlnbiBMYSB0dXJiaWRleiBlcyB1bmEgbWVkaWRhIGRlbCBncmFkbyBlbiBlbCBjdWFsIGVsIGFndWEgcGllcmRlIHN1IHRyYW5zcGFyZW5jaWEgZGViaWRvIGEgbGEgcHJlc2VuY2lhIGRlIHBhcnTDrWN1bGFzIGVuIHN1c3BlbnNpw7NuLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgTWF0ZXJpYSBPcmfDoW5pY2EKICAgICAgICAgICAgdGQgRGVtYW5kYSBCaW9xdcOtbWljYSBkZSBPeMOtZ2VubyAoREJPKQogICAgICAgICAgICB0ZCBtZy9MCiAgICAgICAgICAgIHRkLmFqdXN0ZS1hbGlnbiBDYW50aWRhZCBkZSBveMOtZ2VubyByZXF1ZXJpZG8gcGFyYSBveGlkYWNpw7NuIGRlIGxhIG1hdGVyaWEgb3Jnw6FuaWNhIGJpb2RlZ3JhZGFibGUgcHJlc2VudGUgZW4gbGEgbXVlc3RyYSBkZSBhZ3VhLCBjb21vIHJlc3VsdGFkbyBkZSBsYSBhY2Npw7NuIGRlIG94aWRhY2nDs24gYWVyb2JpYS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIE1hdGVyaWEgT3Jnw6FuaWNhCiAgICAgICAgICAgIHRkIERlbWFuZGEgUXXDrW1pY2EgZGUgT3jDrWdlbm8gKERRTykKICAgICAgICAgICAgdGQgbWcvTAogICAgICAgICAgICB0ZC5hanVzdGUtYWxpZ24gQ2FudGlkYWQgZGUgb3jDrWdlbm8gcmVxdWVyaWRvIHBhcmEgb3hpZGFyIGxhIG1hdGVyaWEgb3Jnw6FuaWNhIGVuIHVuYSBtdWVzdHJhIGRlIGFndWEsIGJham8gY29uZGljaW9uZXMgZXNwZWPDrWZpY2FzIGRlIGFnZW50ZSBveGlkYW50ZSwgdGVtcGVyYXR1cmEgeSB0aWVtcG8uCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBNaWNyb2Jpb2zDs2dpY29zCiAgICAgICAgICAgIHRkIENvbGlmb3JtZXMgVG90YWxlcwogICAgICAgICAgICB0ZCBVRkMvMTAwIG1MCiAgICAgICAgICAgIHRkLmFqdXN0ZS1hbGlnbiBCYWN0ZXJpYXMgZ3JhbW5lZ2F0aXZhcywgbm8gZXNwb3JvZm9ybWFkb3Jhcywgb3hpZGFzYSBuZWdhdGl2YSwgY29uIGNhcGFjaWRhZCBkZSBjcmVjaW1pZW50byBhZXLDs2JpY28geSBmYWN1bHRhdGl2YW1lbnRlIGFuYWVyw7NiaWNvIGVuIHByZXNlbmNpYSBkZSBzYWxlcyBiaWxpYXJlcywgcXVlLCBhIHRlbXBlcmF0dXJhIGVzcGVjaWZpY2FkYSBkZSAzNcK6QyArLy0gMsK6QywgY2F1c2FuIGZlcm1lbnRhY2nDs24gZGUgbGFjdG9zYSBjb24gcHJvZHVjY2nDs24gZGUgZ2FzLiBQb3NlZW4gbGEgZW56aW1hIEItZ2FsYWN0b3NpZGFzYS4gTGEgcHJlc2VuY2lhIGRlIHZhbG9yZXMgcG9yIGVuY2ltYSBkZWwgbsO6bWVybyBtw6F4aW1vIHBlcm1pdGlkbyBpbmRpY2EgY29udGFtaW5hY2nDs24gbWljcm9iaW9sw7NnaWNhIGRlbCBhZ3VhLgogICAgCiAgICAucm93Lm0tMAogICAgICAuY2FqYS10ZXh0LWltZy1ub3RhLmFqdXN0ZS1tb3ZpbC1ibG9xdWUzCiAgICAgICAgLmNvbC1sZy1hdXRvLmFsaWduLXNlbGYtY2VudGVyCiAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKS5kLW5vbmUuZC14bC1ibG9jawogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWc1LnN2ZyIgc3R5bGU9IndpZHRoOiA4NXB4IikubS1hdXRvCiAgICAgICAgLmNvbC1sZwogICAgICAgICAgcC5tYi0wIFNlZ8O6biBlbCBhbGNhbmNlIGRlbCBlc3R1ZGlvIGRlIG1lZGljacOzbiBkZSB2YXJpYWJsZXMgYW1iaWVudGFsZXMgeSBkZSBsYXMgY2FyYWN0ZXLDrXN0aWNhcyBkZWwgYWdyb2Vjb3Npc3RlbWEsIHNlIHB1ZWRlbiBhZGljaW9uYXIgbyBzdXByaW1pciBwYXLDoW1ldHJvcyBwYXJhIGxhIG1lZGljacOzbiBkZSBsYSBjYWxpZGFkIGRlbCBhZ3VhLgoKICAgIFNlcGFyYWRvcgogICAgPCEtLSBCTE9RVUUgNCAtLT4KICAgICN0XzJfMy50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIGgyIDIuMyBEZWZpbmljacOzbiB2YXJpYWJsZXMgYW1iaWVudGFsZXMgcGFyYSBjYWxpZGFkIGRlbCBzdWVsbwogICAgCiAgICAucm93Lm1iLTQuYWp1c3RlLW1vdmlsLWJsb3F1ZTQKICAgICAgLmNvbC1sZwogICAgICAgIHAubWItNSBFbnRyZSBsYXMgcHJpbmNpcGFsZXMgdmFyaWFibGVzIGRlbCBzdWVsbyBxdWUgcHVlZGVuIGluZmx1aXIgZW4gZWwgZGVzYXJyb2xsbyBkZSBsb3MgYWdyb2Vjb3Npc3RlbWFzIHNlIGVuY3VlbnRyYW4gbGFzIHNpZ3VpZW50ZXM6CiAgICAgICAgLmNhamEtdGl0dWxvcy10ZXJjZXItbml2ZWwubWItNChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvaW1nNi5zdmciIHN0eWxlPSJtYXgtd2lkdGg6IDYycHgiKS5tLWF1dG8KICAgICAgICAgIC5jb2wKICAgICAgICAgICAgaDMgVGV4dHVyYSB5IGVzdHJ1Y3R1cmEgZGVsIHN1ZWxvCiAgICAgICAgcCBMYSB0ZXh0dXJhIGVzIHVuYSBwcm9waWVkYWQgZsOtc2ljYSBkZXRlcm1pbmFkYSBwb3IgbGEgY29tcG9zaWNpw7NuIGdyYW51bG9tw6l0cmljYSBkZWwgc3VlbG8sIGNvbXB1ZXN0YSBwb3IgYXJlbmEsIGxpbW8geSBhcmNpbGxhLCBjdXlvcyBkacOhbWV0cm9zIGVzdMOhbiBkZWZpbmlkb3Mgc2Vnw7puIGxhIGVzY2FsYSBkZSBsYSBTb2NpZWRhZCBJbnRlcm5hY2lvbmFsIGRlIGxhIENpZW5jaWEgZGVsIFN1ZWxvLiBQb3Igb3RybyBsYWRvLCBsYSBlc3RydWN0dXJhIGhhY2UgcmVmZXJlbmNpYSBhIGxhIGZvcm1hIGVuIHF1ZSBsYXMgcGFydMOtY3VsYXMgc2UgYWdydXBhbiwgbG8gcXVlIGluZmx1eWUgZW4gbGEgcG9yb3NpZGFkLCBsYSByZXRlbmNpw7NuIGRlIGFndWEgeSBsYSBhaXJlYWNpw7NuIGRlbCBzdWVsbyAoRnVuZGFjacOzbiBHcnVwbyBDYWphbWFyLCAyMDI0KS4KICAgICAgLmNvbC1sZy1hdXRvLmFsaWduLXNlbGYtY2VudGVyICAKICAgICAgICBmaWd1cmUuZC1ub25lLmQteGwtYmxvY2soZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWcxMC5wbmciIHN0eWxlPSJtYXgtd2lkdGg6IDQwMHB4IikubS1hdXRvCiAgICAKICAgIC50aXR1bG8tc2V4dG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tYi0zCiAgICAgIGg1IEZpZ3VyYSAyLgogICAgICBzcGFuIFRyaWFuZ3VsbyB0ZXh0dXJhbCB5IGVzdHJ1Y3R1cmEgZGUgc3VlbG8KCiAgICAucm93LmZvbmRvLWNvbG9yLmFsaWduLWl0ZW1zLWNlbnRlci5tLTAuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi0yCiAgICAgIC5jb2wtbGctYXV0by5tLTAKICAgICAgICBmaWd1cmUoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvaW1nMTEuc3ZnIiBhbHQ9IkxhIGltYWdlbiBjb250aWVuZSBlbCB0cmnDoW5ndWxvIHRleHR1cmFsLCBlbCBjdWFsIHJlbGFjaW9uYSBsb3MgcG9yY2VudGFqZXMgZW50cmUgYXJjaWxsYSwgYXJlbmEgeSBsaW1vLCBsbyBjdWFsIHBlcm1pdGUgY2xhc2lmaWNhciBsYSB0ZXh0dXJhIGRlIHVuIHN1ZWxvLCBhZGljaW9uYWxtZW50ZSBtdWVzdHJhIGxvcyB0aXBvcyBkZSBlc3RydWN0dXJhIHF1ZSBwdWVkZSBwcmVzZW50YXIgZWwgc3VlbG8uIiBzdHlsZT0ibWF4LXdpZHRoOiA2MDBweCIpLm0tYXV0bwogICAgICAuY29sLWxnLnRleHQtdGVtYTItYmxvcXVlNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICBwLm1iLTAgTm90YS4gTGEgdGV4dHVyYSAoaXpxdWllcmRhKSBmcmFuY2EsIGp1bnRvIGNvbiBsYSBlc3RydWN0dXJhIChkZXJlY2hhKSBncmFudWxhciwgc29uIGxhcyBpZGVhbGVzIGVuIGFncmljdWx0dXJhLCBwb3JxdWUgZmFjaWxpdGFuIHF1ZSBleGlzdGEgdW5hIHByb3BvcmNpw7NuIGlkZWFsIGRlIGFpcmUgMjUgJSwgYWd1YSAyNSAlLCBtaW5lcmFsZXMgNDUgJSwgeSBtYXRlcmlhIG9yZ8OhbmljYSA1JS4gVG9tYWRvIGRlIEZ1bmRhY2nDs24gR3J1cG8gQ2FqYW1hciwgMjAyNC4gCiAgICAKICAgIGZpZ2NhcHRpb24ubWItNSBOb3RhLiBUb21hZG8gZGUgRnVuZGFjacOzbiBHcnVwbyBDYWphbWFyLCAyMDI0LiAKICAgIAogICAgLmNhamEtdGl0dWxvcy10ZXJjZXItbml2ZWwubWItNShkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgIC5jb2wtbGctYXV0bwogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvaW1nNi5zdmciIHN0eWxlPSJtYXgtd2lkdGg6IDYycHgiKS5tLWF1dG8KICAgICAgLmNvbAogICAgICAgIGgzIFByb2Z1bmRpZGFkIGRlbCBzdWVsbwogICAgCiAgICAucm93Lm0tMC5tYi00CiAgICAgIC5jb2wtbGctYXV0by5hbGlnbi1zZWxmLWNlbnRlcgogICAgICAgIGZpZ3VyZS5hanVzdGUtaW1nLmQtbm9uZS5kLXhsLWJsb2NrKGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyL2ltZzEyLnBuZyIgc3R5bGU9Im1heC13aWR0aDogNDAwcHgiKS5tLWF1dG8KICAgICAgLmNvbC1sZy5hanVzdGUtbW92aWwtYmxvcXVlNAogICAgICAgIHAubWItMC50ZXh0LXRlbWEyLWJsb3F1ZTQtMS5tYi0zIENvbXByZW5kZSBsYSBjYXBhIHN1cGVyZmljaWFsIGRlbCBzdWVsbyAoaG9yaXpvbnRlIEEpIHkgZWwgc3Vic3VlbG8gKGhvcml6b250ZXMgRSB5IEIpLiBFbCBob3Jpem9udGUgQyBzZSBjYXJhY3Rlcml6YSBwb3IgcHJlc2VudGFyIHVuIG1lbm9yIGdyYWRvIGRlIGZvcm1hY2nDs24gZWRhZm9nw6luZXRpY2EuIExhIHByb2Z1bmRpZGFkIGVmZWN0aXZhIGRlbCBzdWVsbyBzZSBkZWZpbmUgY29tbyBlbCBlc3Blc29yIHRvdGFsIGRlbCBwZXJmaWwgZWTDoWZpY28gcXVlIGluZmx1eWUgZW4gZWwgZGVzYXJyb2xsbyBkZSBsYXMgcGxhbnRhcyAoRkFPLCAyMDI1KS4KICAgICAgICBwLm1iLTAgTG9zIGhvcml6b250ZXMgZGVsIHN1ZWxvIHNvbiBjYXBhcyBxdWUgZGV0ZXJtaW5hbiBzdXMgY2FyYWN0ZXLDrXN0aWNhcyB5IHByb3BpZWRhZGVzLiBFbCBzaXN0ZW1hIGRlIGNsYXNpZmljYWNpw7NuIG3DoXMgdXRpbGl6YWRvIHBhcmEgc3UgZGVzaWduYWNpw7NuIGVtcGxlYSBsZXRyYXMgbWF5w7pzY3VsYXM6IEgsIE8sIEEsIEUsIEIsIEMgeSBSLCBxdWUgcmVwcmVzZW50YW4gbG9zIGhvcml6b250ZXMgZG9taW5hbnRlcy4gQSBjb250aW51YWNpw7NuLCBzZSBwcmVzZW50YSB1bmEgdGFibGEgeSBmaWd1cmEgZXhwbGljYXRpdmEgY29uIHN1IGNsYXNpZmljYWNpw7NuLgogICAgCiAgICAudGl0dWxvLXNleHRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8ubWItMwogICAgICBoNSBUYWJsYSAyLgogICAgICBzcGFuIERlZmluaWNpb25lcyB5IGRlc2lnbmFjaW9uZXMgc2ltcGxpZmljYWRhcyBkZSBsb3MgaG9yaXpvbnRlcyBkb21pbmFudGVzIGRlbCBzdWVsbwogICAgCiAgICAudGFibGEtYS5hanVzdGUtdGFibGEubWItNShkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgIHRhYmxlCiAgICAgICAgY2FwdGlvbiBOb3RhLiBUb21hZG8gZGUgZG9jdW1lbnRvIDxlbT5XZWI8L2VtPiDigJxHZW5lcmFsaWRhZGVz4oCdLiBGQU8gKDIwMjUpLiAKICAgICAgICB0aGVhZAogICAgICAgICAgdHIKICAgICAgICAgICAgdGggU8OtbWJvbG8KICAgICAgICAgICAgdGggSG9yaXpvbnRlIGRvbWluYW50ZQogICAgICAgIHRib2R5CiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBICiAgICAgICAgICAgIHRkLmFqdXN0ZS1hbGlnbiA8c3Ryb25nPkhvcml6b250ZSBvcmfDoW5pY288L3N0cm9uZz4sIGZvcm1hZG8gKG8gZW4gZm9ybWFjacOzbikgcG9yIHVuIGRlcMOzc2l0byBkZSBtYXRlcmlhIG9yZ8OhbmljYSBlbiBsYSBzdXBlcmZpY2llIGRlbCBzdWVsby4gU2UgY29tcG9uZSBwb3IgdW4gMjAgYSAzMCUgZGUgbWF0ZXJpYSBvcmfDoW5pY2EsIHkgw6lzdGEgZGVwZW5kZSBkZWwgdGlwbyBkZSB2ZWdldGFjacOzbiBkZSBkb25kZSBwcm9jZWRlIGxhIG1hdGVyaWEgb3Jnw6FuaWNhLiAKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIE8KICAgICAgICAgICAgdGQuYWp1c3RlLWFsaWduIDxzdHJvbmc+SG9yaXpvbnRlIG9yZ8Ohbmljbzwvc3Ryb25nPiwgYSBkaWZlcmVuY2lhIHF1ZSBubyBlc3TDoSBzYXR1cmFkbyBkZSBhZ3VhIG3DoXMgZGUgdW5vcyBjdWFudG9zIGTDrWFzIHBvciBhw7FvLiBDb250aWVuZSBwb3IgbG8gbWVub3MgdW4gMzUlIGRlIG1hdGVyaWEgb3Jnw6FuaWNhIHF1ZSwgcG9yIGxvIGdlbmVyYWwsIGNvbnNpc3RlIGVuIG1hdGVyaWEgb3Jnw6FuaWNhIHBhcmNpYWxtZW50ZSBkZXNjb21wdWVzdGEuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBBCiAgICAgICAgICAgIHRkLmFqdXN0ZS1hbGlnbiA8c3Ryb25nPkhvcml6b250ZSBtaW5lcmFsPC9zdHJvbmc+LCBmb3JtYWRvIChvIGVuIGZvcm1hY2nDs24pIGVuIGxhIHN1cGVyZmljaWUgbyBhZHlhY2VudGUgYSDDqXN0YS4gRXN0ZSBob3Jpem9udGUgbXVlc3RyYSB1bmEgYWN1bXVsYWNpw7NuIGRlIG1hdGVyaWEgb3Jnw6FuaWNhIGh1bWlmaWNhZGEgYWx0YW1lbnRlIGFzb2NpYWRhIGNvbiBwYXJ0w61jdWxhcyBtaW5lcmFsZXMuIEVzIGRlIGNvbG9yYWNpw7NuIGFsZ28gbcOhcyBvc2N1cmEgcXVlIGVsIGhvcml6b250ZSBCIHN1YnlhY2VudGUgeSBlbCBtYXRlcmlhbCBvcmfDoW5pY28gZGVzY29tcHVlc3RvIGFwYXJlY2UgbWV6Y2xhZG8gY29uIGVsIG1hdGVyaWFsIG1pbmVyYWwgZGVwZW5kaWVuZG8gYSBsYSBhY3RpdmlkYWQgYmlvbMOzZ2ljYS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEUKICAgICAgICAgICAgdGQuYWp1c3RlLWFsaWduIDxzdHJvbmc+SG9yaXpvbnRlIGVsdXZpYWw8L3N0cm9uZz4sIHlhY2UgYmFqbyB1biBob3Jpem9udGUgSCwgTyBvIEEuIENvbnRpZW5lIG1lbm9zIG1hdGVyaWEgb3Jnw6FuaWNhLCBwcmVzZW50YSB1bmEgYWN1bXVsYWNpw7NuIGRlIG1pbmVyYWxlcyByZXNpc3RlbnRlcyB5IGVzIGRlIGNvbG9yIG3DoXMgY2xhcm8uIFNlIGZvcm1hIHBvciBsYSBww6lyZGlkYSBkZSBoaWVycm8sIGFyY2lsbGEgZmluYSwgZXRjLiwgcXVlIGhhbiBzaWRvIHRyYXNsYWRhZG9zIGFsIGhvcml6b250ZSBCIHN1YnlhY2VudGUgeSBzZSBhY3VtdWxhbiBhbGzDrS4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEIKICAgICAgICAgICAgdGQuYWp1c3RlLWFsaWduIDxzdHJvbmc+SG9yaXpvbnRlIG1pbmVyYWw8L3N0cm9uZz4sIGVuIHF1ZSBsYXMgcGFydMOtY3VsYXMgbWluZXJhbGVzIChzb2xhcyBvIGNvbWJpbmFkYXMgY29uIGh1bXVzKSBzZSBoYW4gY29uY2VudHJhZG8gY29uIGVsIGRlY3Vyc2FyIGRlbCB0aWVtcG8uCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBDCiAgICAgICAgICAgIHRkLmFqdXN0ZS1hbGlnbiA8c3Ryb25nPkhvcml6b250ZSBtaW5lcmFsIGRlIG1hdGVyaWFsIG5vIGNvbnNvbGlkYWRvPC9zdHJvbmc+LCBhIHBhcnRpciBkZWwgY3VhbCBzZSBoYSBkZXNhcnJvbGxhZG8gZWwgc3VlbG8uIFRhbWJpw6luIHNlIGluY2x1eWVuIGFxdcOtIGxvcyBtYXRlcmlhbGVzIGdyYXZvc29zIHkgcGVkcmVnb3NvcyBkZSBmb25kbyBxdWUgcGVybWl0ZW4gZWwgZGVzYXJyb2xsbyBkZSBsYXMgcmHDrWNlcy4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIFIKICAgICAgICAgICAgdGQuYWp1c3RlLWFsaWduIDxzdHJvbmc+Q2FwYSBkZSByb2NhIGNvbnRpbnVhIGVuZHVyZWNpZGE8L3N0cm9uZz4sIHN1ZmljaWVudGVtZW50ZSBjb2hlcmVudGUgZW4gaMO6bWVkbyBwYXJhIGhhY2VyIGltcG9zaWJsZSBsYSBleGNhdmFjacOzbiBjb24gdW5hIHBhbGEuIEVzdGEgcm9jYSBwdWVkZSB0ZW5lciBmaXN1cmFzLCBwZXJvIMOpc3RhcyBzb24gbXV5IGVzY2FzYXMgeSBkZW1hc2lhZG8gcGVxdWXDsWFzIHBhcmEgdW4gZGVzYXJyb2xsbyByYWRpY2FsIHNpZ25pZmljYXRpdm8uIAoKICAgIC50aXR1bG8tc2V4dG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tYi0zCiAgICAgIGg1IEZpZ3VyYSAzLgogICAgICBzcGFuIEhvcml6b250ZXMgZGVsIHN1ZWxvCiAgICAKICAgIC5yb3cuZm9uZG8tY29sb3IuaC0xMDAuYWxpZ24taXRlbXMtY2VudGVyLm0tMC5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJmYWRlLXVwIikucHktNAogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvaW1nMTMucG5nIiBhbHQ9IkxhIGltYWdlbiByZWFsaXphIHVuYSByZXByZXNlbnRhY2nDs24gZ3LDoWZpY2EgZGUgbG9zIGhvcml6b250ZXMgZGVsIHN1ZWxvLCBsb3MgY3VhbGVzIGNvbXBvbmVuIGVsIHN1ZWxvLCBzdWJzdWVsbyB5IHJvY2EgbWFkcmUuIiBzdHlsZT0ibWF4LXdpZHRoOiA1MDBweCIpLm0tYXV0bwogICAgCiAgICAucm93Lm1iLTUuYWp1c3RlLW1vdmlsLWJsb3F1ZTQKICAgICAgLmNvbC1sZy02Lm1iLTMKICAgICAgICAuY2FqYS10aXR1bG9zLXRlcmNlci1uaXZlbC5hanVzdGVfX21vdmlsKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWc2LnN2ZyIgc3R5bGU9Im1heC13aWR0aDogNjJweCIpLm0tYXV0bwogICAgICAgICAgLmNvbC5hanVzdGUtbW92aWwKICAgICAgICAgICAgaDMgRGVuc2lkYWQgZGVsIHN1ZWxvCiAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJmYWRlLXVwIikucHktNAogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvaW1nMTQucG5nIiBzdHlsZT0ibWF4LXdpZHRoOiA2NTBweCIpLm0tYXV0bwogICAgICAgIHAubWItMC5hanVzdGUtY29sb3ItMSBQZXJtaXRlIGRldGVybWluYXIgbGEgcG9yb3NpZGFkIHRvdGFsIGRlbCBzdWVsbywgeWEgcXVlIHNlIHJlZmllcmUgYWwgcGVzbyBwb3IgdW5pZGFkIGRlIHZvbHVtZW4uIFNlIGRpc3Rpbmd1ZW4gZG9zIHRpcG9zOiBsYSBkZW5zaWRhZCByZWFsLCBxdWUgY29ycmVzcG9uZGUgYSBsYXMgcGFydMOtY3VsYXMgZGVuc2FzIGRlbCBzdWVsbyB5IHZhcsOtYSBzZWfDum4gc3UgY29tcG9zaWNpw7NuLCBjb24gdW4gdmFsb3IgcHJvbWVkaW8gZGUgMiw2NTsgeSBsYSBkZW5zaWRhZCBhcGFyZW50ZSwgcXVlIGNvbnNpZGVyYSBlbCB2b2x1bWVuIHRvdGFsIGRlbCBzdWVsbywgaW5jbHV5ZW5kbyBlc3BhY2lvcyBwb3Jvc29zIChGQU8sIDIwMjUpLgogICAgICAuY29sLWxnLTYKICAgICAgICAuY2FqYS10aXR1bG9zLXRlcmNlci1uaXZlbC5hanVzdGVfX21vdmlsKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWc2LnN2ZyIgc3R5bGU9Im1heC13aWR0aDogNjJweCIpLm0tYXV0bwogICAgICAgICAgLmNvbAogICAgICAgICAgICBoMyBwSCBkZWwgc3VlbG8KICAgICAgICBmaWd1cmUoZGF0YS1hb3M9ImZhZGUtdXAiKS5weS00CiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWcxNS5wbmciIHN0eWxlPSJtYXgtd2lkdGg6IDY1MHB4IikubS1hdXRvCiAgICAgICAgcC5tYi0wLmFqdXN0ZS1jb2xvci0yIEluZGljYSBsYSBhY3RpdmlkYWQgZGUgbG9zIGlvbmVzIGhpZHLDs2dlbm8gZW4gbGEgc29sdWNpw7NuIGRlbCBzdWVsbywgZGV0ZXJtaW5hbmRvIHNpIGVzIMOhY2lkbywgbmV1dHJvIG8gYWxjYWxpbm8uIEVzdGUgcGFyw6FtZXRybyBpbmZsdXllIGVuIG3Dumx0aXBsZXMgZmFjdG9yZXMgZWTDoWZpY29zIHkgYWZlY3RhIGRpcmVjdGFtZW50ZSBlbCBjcmVjaW1pZW50byBkZSBsYXMgcGxhbnRhcy4KICAgIAogICAgLmNhamEtdGl0dWxvcy10ZXJjZXItbml2ZWwubWItNChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgIC5jb2wtbGctYXV0bwogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvaW1nNi5zdmciIHN0eWxlPSJtYXgtd2lkdGg6IDYycHgiKS5tLWF1dG8KICAgICAgLmNvbAogICAgICAgIGgzIE1hY3JvbnV0cmllbnRlcyB5IG1pY3JvbnV0cmllbnRlcyBkZWwgc3VlbG8KICAgIAogICAgcC5tYi00IEVsIHN1ZWxvIHByb3BvcmNpb25hIG51dHJpZW50ZXMgZXNlbmNpYWxlcyBwYXJhIGVsIGNyZWNpbWllbnRvIHNhbHVkYWJsZSBkZSBsYXMgcGxhbnRhcywgbG9zIGN1YWxlcyBzZSBjbGFzaWZpY2FuIGVuIGRvcyBncmFuZGVzIGdydXBvcyBzZWfDum4gc3UgYWJ1bmRhbmNpYToKCiAgICAucm93Lm1iLTQuYWp1c3RlLW1vdmlsLWJsb3F1ZTQKICAgICAgLmNvbC1sZy02Lm1iLTQKICAgICAgICAuY2FqYS10ZXh0LWltZy1ub3RhLWNvcnRvLmQtZmxleC5oLTEwMAogICAgICAgICAgLmNvbC14bC0zCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iZmFkZS11cCIpLmQtbm9uZS5kLXhsLWJsb2NrCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvaW1nNy5zdmciIHN0eWxlPSJ3aWR0aDogODVweCIpLm0tYXV0bwogICAgICAgICAgLmNvbC14bC05CiAgICAgICAgICAgIGg0LnAtMCBNYWNyb251dHJpZW50ZXMKICAgICAgICAgICAgcC5tYi0wLnAtMCBJbmNsdXllbiBuaXRyw7NnZW5vLCBmw7NzZm9ybywgcG90YXNpbywgY2FsY2lvIHkgbWFnbmVzaW8uIFNlIGVuY3VlbnRyYW4gZW4gbWF5b3IgY2FudGlkYWQgeSBzb24gZXNlbmNpYWxlcyBwYXJhIGVsIGRlc2Fycm9sbG8gZGUgbGFzIHBsYW50YXMuCiAgICAgIC5jb2wtbGctNi5tYi00CiAgICAgICAgLmNhamEtdGV4dC1pbWctbm90YS1jb3J0by5kLWZsZXguaC0xMDAKICAgICAgICAgIC5jb2wteGwtMwogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9ImZhZGUtdXAiKS5kLW5vbmUuZC14bC1ibG9jawogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyL2ltZzguc3ZnIiBzdHlsZT0id2lkdGg6IDg1cHgiKS5tLWF1dG8KICAgICAgICAgIC5jb2wteGwtOQogICAgICAgICAgICBoNC5wLTAgTWljcm9udXRyaWVudGVzCiAgICAgICAgICAgIHAubWItMC5wLTAgQ29tcHJlbmRlbiB6aW5jLCBib3JvLCBtb2xpYmRlbm8sIG1hbmdhbmVzbywgY2xvcm8geSBjb2JyZS4gQXVucXVlIGVzdMOhbiBwcmVzZW50ZXMgZW4gbWVub3IgcHJvcG9yY2nDs24sIHNvbiBpbmRpc3BlbnNhYmxlcyBwYXJhIGVsIG1ldGFib2xpc21vIHZlZ2V0YWwuCiAgICAKICAgIHAubWItNCBQYXJhIGNvbXByZW5kZXIgbGEgcmVsZXZhbmNpYSBkZSBlc3RhcyB5IG90cmFzIHZhcmlhYmxlcyBxdWUgaW5mbHV5ZW4gZW4gZWwgZGVzYXJyb2xsbyBkZSBsb3MgYWdyb2Vjb3Npc3RlbWFzLCBsYSBzaWd1aWVudGUgdGFibGEgcmVsYWNpb25hIGxhcyB2YXJpYWJsZXMgY29uIGxhIGNvbmRpY2nDs24geSBsYXMgZnVuY2lvbmVzIGRlbCBzdWVsby4KCiAgICAuYmctLWltZ18wMy5tYi00CiAgICAgIC5yb3cuaC0xMDAuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9ImZhZGUtdXAiKS5kLW5vbmUuZC14bC1ibG9jawogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWcxNi5wbmciLCBhbHQ9Jycgc3R5bGU9IndpZHRoOiAzNzBweCIpLm0tYXV0bwogICAgICAgIC5jb2wtbGcKICAgICAgICAgIEFjb3JkaW9uQSh0aXBvPSJhIiBjbGFzZS10YXJqZXRhPSJ0YXJqZXRhIGFjb3JkZW9uQSIpCiAgICAgICAgICAgIC5yb3codGl0dWxvPSJGw61zaWNhcyIpLmFqdXN0ZS1jYWphQWNvcmRpb24KICAgICAgICAgICAgICA8dWwgY2xhc3M9ImZhLXVsIj4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWItMyI+PHNwYW4gY2xhc3M9ImZhLWxpIj48aSBjbGFzcz0iZmFzIGZhLWxlYWYgYWp1c3RlLWkiPjwvaT48L3NwYW4+PHN0cm9uZz5UZXh0dXJhIHkgZXN0cnVjdHVyYTwvc3Ryb25nPjogaW5mbHV5ZSBlbiBsYSByZXRlbmNpw7NuIHkgdHJhbnNwb3J0ZSBkZSBhZ3VhIHkgY29tcHVlc3RvcyBxdcOtbWljb3MsIGFkZW3DoXMgZGUgYWZlY3RhciBsYSBlcm9zacOzbiBkZWwgc3VlbG8uPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWItMyI+PHNwYW4gY2xhc3M9ImZhLWxpIj48aSBjbGFzcz0iZmFzIGZhLWxlYWYgYWp1c3RlLWkiPjwvaT48L3NwYW4+PHN0cm9uZz5Qcm9mdW5kaWRhZCBkZWwgc3VlbG88L3N0cm9uZz46IGRldGVybWluYSBsYSBwcm9kdWN0aXZpZGFkIHBvdGVuY2lhbCBkZWwgc3VlbG8geSBzdSBzdXNjZXB0aWJpbGlkYWQgYSBsYSBlcm9zacOzbi48L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtYi0zIj48c3BhbiBjbGFzcz0iZmEtbGkiPjxpIGNsYXNzPSJmYXMgZmEtbGVhZiBhanVzdGUtaSI+PC9pPjwvc3Bhbj48c3Ryb25nPkluZmlsdHJhY2nDs24geSBkZW5zaWRhZCBhcGFyZW50ZTwvc3Ryb25nPjogcmVsYWNpb25hZGEgY29uIGVsIHBvdGVuY2lhbCBkZSBsYXZhZG8sIGxhIHByb2R1Y3RpdmlkYWQgZGVsIHN1ZWxvIHkgc3UgZXJvc2l2aWRhZC48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJmYS1saSI+PGkgY2xhc3M9ImZhcyBmYS1sZWFmIGFqdXN0ZS1pIj48L2k+PC9zcGFuPjxzdHJvbmc+Q2FwYWNpZGFkIGRlIHJldGVuY2nDs24gZGUgYWd1YTwvc3Ryb25nPjogaW5mbHV5ZSBlbiBsYSByZXRlbmNpw7NuIGRlIGFndWEsIGVsIHRyYW5zcG9ydGUgZGUgY29tcHVlc3RvcywgbGEgZXJvc2l2aWRhZCwgbGEgaHVtZWRhZCBhcHJvdmVjaGFibGUsIGxhIHRleHR1cmEgeSBsYSBtYXRlcmlhIG9yZ8OhbmljYSBkZWwgc3VlbG8uPC9saT4KICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAucm93KHRpdHVsbz0iUXXDrW1pY2FzICIpLmFqdXN0ZS1jYWphQWNvcmRpb24KICAgICAgICAgICAgICA8dWwgY2xhc3M9ImZhLXVsIj4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWItMyI+PHNwYW4gY2xhc3M9ImZhLWxpIj48aSBjbGFzcz0iZmFzIGZhLWxlYWYgYWp1c3RlLWkiPjwvaT48L3NwYW4+PHN0cm9uZz5NYXRlcmlhIG9yZ8OhbmljYSAoTiB5IEMgdG90YWwpPC9zdHJvbmc+OiBkZWZpbmUgbGEgZmVydGlsaWRhZCBkZWwgc3VlbG8sIHN1IGVzdGFiaWxpZGFkIHkgc3Ugc3VzY2VwdGliaWxpZGFkIGEgbGEgZXJvc2nDs24uPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWItMyI+PHNwYW4gY2xhc3M9ImZhLWxpIj48aSBjbGFzcz0iZmFzIGZhLWxlYWYgYWp1c3RlLWkiPjwvaT48L3NwYW4+PHN0cm9uZz5wSDwvc3Ryb25nPjogZGV0ZXJtaW5hIGxhIGFjdGl2aWRhZCBxdcOtbWljYSB5IGJpb2zDs2dpY2EgZGVsIHN1ZWxvLjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1iLTMiPjxzcGFuIGNsYXNzPSJmYS1saSI+PGkgY2xhc3M9ImZhcyBmYS1sZWFmIGFqdXN0ZS1pIj48L2k+PC9zcGFuPjxzdHJvbmc+Q29uZHVjdGl2aWRhZCBlbMOpY3RyaWNhPC9zdHJvbmc+OiBpbmZsdXllIGVuIGxhIGFjdGl2aWRhZCB2ZWdldGFsIHkgbWljcm9iaWFuYS48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJmYS1saSI+PGkgY2xhc3M9ImZhcyBmYS1sZWFmIGFqdXN0ZS1pIj48L2k+PC9zcGFuPjxzdHJvbmc+UCwgTiB5IEsgZXh0cmFjdGFibGVzPC9zdHJvbmc+OiByZXByZXNlbnRhbiBsb3MgbnV0cmllbnRlcyBkaXNwb25pYmxlcyBwYXJhIGxhIHBsYW50YSwgbGEgcG9zaWJsZSBww6lyZGlkYSBkZSBuaXRyw7NnZW5vLCBsYSBwcm9kdWN0aXZpZGFkIHkgbG9zIGluZGljYWRvcmVzIGRlIGNhbGlkYWQgYW1iaWVudGFsLjwvbGk+CiAgICAgICAgICAgICAgPC91bD4gICAgICAgICAgICAgICAKICAgICAgICAgICAgLnJvdyh0aXR1bG89IkJpb2zDs2dpY2FzIikuYWp1c3RlLWNhamFBY29yZGlvbgogICAgICAgICAgICAgIDx1bCBjbGFzcz0iZmEtdWwiPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtYi0zIj48c3BhbiBjbGFzcz0iZmEtbGkiPjxpIGNsYXNzPSJmYXMgZmEtbGVhZiBhanVzdGUtaSI+PC9pPjwvc3Bhbj48c3Ryb25nPkJpb21hc2EgbWljcm9iaWFuYSAoQyB5IE4pPC9zdHJvbmc+OiByZXByZXNlbnRhIGVsIHBvdGVuY2lhbCBtaWNyb2JpYW5vIGNhdGFsw610aWNvIHkgYWN0w7phIGNvbW8gZGVww7NzaXRvIGRlIGNhcmJvbm8geSBuaXRyw7NnZW5vLCByZWZsZWphbmRvIGNhbWJpb3MgdGVtcHJhbm9zIGVuIGxhIG1hdGVyaWEgb3Jnw6FuaWNhIGRlYmlkbyBhbCBtYW5lam8gZGVsIHN1ZWxvLjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1iLTMiPjxzcGFuIGNsYXNzPSJmYS1saSI+PGkgY2xhc3M9ImZhcyBmYS1sZWFmIGFqdXN0ZS1pIj48L2k+PC9zcGFuPjxzdHJvbmc+UmVzcGlyYWNpw7NuLCBodW1lZGFkIHkgdGVtcGVyYXR1cmE8L3N0cm9uZz46IG1pZGVuIGxhIGFjdGl2aWRhZCBtaWNyb2JpYW5hIHkgcGVybWl0ZW4gZXN0aW1hciBsYSBhY3RpdmlkYWQgZGUgbGEgYmlvbWFzYS48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJmYS1saSI+PGkgY2xhc3M9ImZhcyBmYS1sZWFmIGFqdXN0ZS1pIj48L2k+PC9zcGFuPjxzdHJvbmc+TiBwb3RlbmNpYWxtZW50ZSBtaW5lcmFsaXphYmxlPC9zdHJvbmc+OiBpbmRpY2EgbGEgcHJvZHVjdGl2aWRhZCBkZWwgc3VlbG8geSBlbCBzdW1pbmlzdHJvIHBvdGVuY2lhbCBkZSBuaXRyw7NnZW5vLjwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgIC5yb3cubWItNS5hanVzdGUtbW92aWwtYmxvcXVlNAogICAgICAuY29sLWxnCiAgICAgICAgcC5tYi00IFBhcmEgc2VsZWNjaW9uYXIgbG9zIGluZGljYWRvcmVzIHF1ZSBmb3JtYW4gcGFydGUgZGUgbGFzIHZhcmlhYmxlcyBkZSBjYWxpZGFkIGRlbCBzdWVsbywgZXMgbmVjZXNhcmlvIHF1ZSBjdW1wbGFuIGNvbiBjaWVydGFzIGNvbmRpY2lvbmVzIChNYXNlcmEgZXQgYWwuLCAyMDAwKToKICAgICAgICA8dWwgY2xhc3M9ImZhLXVsIGFqdXN0ZS11bC10ZW1hMiI+CiAgICAgICAgICA8bGk+PHNwYW4gY2xhc3M9ImZhLWxpIj48aSBjbGFzcz0iZmFzIGZhLWxlYWYgYWp1c3RlLWkiPjwvaT48L3NwYW4+U2VyIGludGVncmFkb3Jlcy48L2xpPgogICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJmYS1saSI+PGkgY2xhc3M9ImZhcyBmYS1sZWFmIGFqdXN0ZS1pIj48L2k+PC9zcGFuPlNlciBmw6FjaWxlcyBkZSBtZWRpciwgYmFzYWRvcyBlbiBpbmZvcm1hY2nDs24gb2JqZXRpdmEgeSBkZSBmw6FjaWwgcmVjb25vY2ltaWVudG8uPC9saT4KICAgICAgICAgIDxsaT48c3BhbiBjbGFzcz0iZmEtbGkiPjxpIGNsYXNzPSJmYXMgZmEtbGVhZiBhanVzdGUtaSI+PC9pPjwvc3Bhbj5BZGVjdWFyc2UgYWwgbml2ZWwgZGUgYW7DoWxpc2lzIHkgYWwgc2lzdGVtYSBlc3R1ZGlhZG8uPC9saT4KICAgICAgICAgIDxsaT48c3BhbiBjbGFzcz0iZmEtbGkiPjxpIGNsYXNzPSJmYXMgZmEtbGVhZiBhanVzdGUtaSI+PC9pPjwvc3Bhbj5TZXIgYXBsaWNhYmxlcyBhIGRpdmVyc29zIGVjb3Npc3RlbWFzIHkgY29uZGljaW9uZXMuPC9saT4KICAgICAgICAgIDxsaT48c3BhbiBjbGFzcz0iZmEtbGkiPjxpIGNsYXNzPSJmYXMgZmEtbGVhZiBhanVzdGUtaSI+PC9pPjwvc3Bhbj5SZWZsZWphciBlbCBhdHJpYnV0byBkZSBzb3N0ZW5pYmlsaWRhZCBxdWUgc2UgZGVzZWEgZXZhbHVhci48L2xpPgogICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJmYS1saSI+PGkgY2xhc3M9ImZhcyBmYS1sZWFmIGFqdXN0ZS1pIj48L2k+PC9zcGFuPlNlciBjb21wcmVuc2libGVzIHkgYWNjZXNpYmxlcyBwYXJhIHN1IGludGVycHJldGFjacOzbi48L2xpPgogICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJmYS1saSI+PGkgY2xhc3M9ImZhcyBmYS1sZWFmIGFqdXN0ZS1pIj48L2k+PC9zcGFuPlBlcm1pdGlyIGlkZW50aWZpY2FyIGNhbWJpb3MgeSBkaWZlcmVuY2lhcyBlbnRyZSBsb3Mgc2lzdGVtYXMuPC9saT4KICAgICAgICAgIDxsaT48c3BhbiBjbGFzcz0iZmEtbGkiPjxpIGNsYXNzPSJmYXMgZmEtbGVhZiBhanVzdGUtaSI+PC9pPjwvc3Bhbj5DZW50cmFyc2UgZW4gYXNwZWN0b3MgcHLDoWN0aWNvcyB5IHJlbGV2YW50ZXMuPC9saT4KICAgICAgICA8L3VsPgogICAgICAuY29sLWxnLWF1dG8KICAgICAgICBmaWd1cmUoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmQtbm9uZS5kLXhsLWJsb2NrCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWcxNy5zdmciLCBhbHQ9Jycgc3R5bGU9IndpZHRoOiA0MTBweCIpLm0tYXV0bwogICAgCiAgICAuY2FqYS10aXR1bG9zLXRlcmNlci1uaXZlbC5tYi00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWc2LnN2ZyIgc3R5bGU9Im1heC13aWR0aDogNjJweCIpLm0tYXV0bwogICAgICAuY29sCiAgICAgICAgaDMgTWV0b2RvbG9nw61hIGRlIHByaW9yaXphY2nDs24KICAgICAgCiAgICAucm93LmZvbmRvLXRlbWEyLTEKICAgICAgcC5tYi01IFNlIHJlY29taWVuZGEgZWwgdXNvIGRlIGxhIDxzdHJvbmc+bWF0cml6IGRlIHByaW9yaXphY2nDs248L3N0cm9uZz4sIHVuYSBoZXJyYW1pZW50YSBxdWUgcGVybWl0ZSBqZXJhcnF1aXphciB2YXJpYWJsZXMgYW1iaWVudGFsZXMgc2Vnw7puIHN1IG1hZ25pdHVkLCBncmF2ZWRhZCwgY2FwYWNpZGFkIHkgYmVuZWZpY2lvLCBmYWNpbGl0YW5kbyBsYSB0b21hIGRlIGRlY2lzaW9uZXMgZW4gZWwgbWFuZWpvIGRlbCBhZ3JvZWNvc2lzdGVtYS4gUGFyYSBzdSBhcGxpY2FjacOzbiwgc2UgZGViZW4gc2VndWlyIGxvcyBzaWd1aWVudGVzIHBhc29zOgogICAgICAucm93Lm1iLTQKICAgICAgICAuY29sLXhsLTMuY29sLW1kLTYKICAgICAgICAgIC5jYWphLXRleHQtaW1nLXRlbWExLWJsb3F1ZTIuaC0xMDAoZGF0YS1hb3M9ImZsaXAtbGVmdCIpCiAgICAgICAgICAgIC5jb2wtNwogICAgICAgICAgICAgIGZpZ3VyZS5tYi0zCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWc5LnN2ZycsIGFsdD0nJyBzdHlsZT0ibWF4LXdpZHRoOiA5NXB4IikubS1hdXRvCiAgICAgICAgICAgIGg1Lm1iLTQudGV4dC1jZW50ZXIgUmV2aXNpw7NuIGJpYmxpb2dyw6FmaWNhCiAgICAgICAgICAgIHAgSW52ZXN0aWdhciB5IHNlbGVjY2lvbmFyIGluZm9ybWFjacOzbiBzb2JyZSBsYXMgdmFyaWFibGVzIGFtYmllbnRhbGVzIHF1ZSBpbmZsdXllbiBlbiBlbCBhZ3JvZWNvc2lzdGVtYS4KICAgICAgICAuY29sLXhsLTMuY29sLW1kLTYuYWp1c3RlLTIKICAgICAgICAgIC5jYWphLXRleHQtaW1nLXRlbWExLWJsb3F1ZTIuaC0xMDAoZGF0YS1hb3M9ImZsaXAtbGVmdCIpCiAgICAgICAgICAgIC5jb2wtNwogICAgICAgICAgICAgIGZpZ3VyZS5tYi0zCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi9pbWcxMC5zdmcnLCBhbHQ9Jycgc3R5bGU9Im1heC13aWR0aDogOTVweCIpLm0tYXV0bwogICAgICAgICAgICBoNS5tYi00LnRleHQtY2VudGVyIENvbnN1bHRhIGNvbiBhY3RvcmVzIGxvY2FsZXMKICAgICAgICAgICAgcCBDb25zdWx0YXIgY29uIHTDqWNuaWNvcyB5IGFncmljdWx0b3JlcyBsb2NhbGVzIHBhcmEgY29ub2NlciBsb3MgYXNwZWN0b3MgYW1iaWVudGFsZXMgcmVsZXZhbnRlcyBxdWUgZXN0w6FuIGdlbmVyYW5kbyBpbXBhY3RvIGVuIGxhIHJlZ2nDs24uCiAgICAgICAgLmNvbC14bC0zLmNvbC1tZC02LmFqdXN0ZS0xCiAgICAgICAgICAuY2FqYS10ZXh0LWltZy10ZW1hMS1ibG9xdWUyLmgtMTAwKGRhdGEtYW9zPSJmbGlwLWxlZnQiKQogICAgICAgICAgICAuY29sLTcKICAgICAgICAgICAgICBmaWd1cmUubWItMwogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvaW1nMjAuc3ZnJywgYWx0PScnIHN0eWxlPSJtYXgtd2lkdGg6IDk1cHgiKS5tLWF1dG8KICAgICAgICAgICAgaDUubWItNC50ZXh0LWNlbnRlciBQYXJ0aWN1bGFyaWRhZGVzIGRlbCBhZ3JvZWNvc2lzdGVtYQogICAgICAgICAgICBwIFRpcG8gZGUgY3VsdGl2by4gUGxhbiBkZSBmZXJ0aWxpemFjacOzbi4gUHLDoWN0aWNhcyBhZ3JvcGVjdWFyaWFzLiBBc2lzdGVuY2lhIHTDqWNuaWNhLiBSZXF1ZXJpbWllbnRvIGRlIGNvbmRpY2lvbmVzIGNsaW3DoXRpY2FzLgogICAgICAgIC5jb2wteGwtMy5jb2wtbWQtNi5hanVzdGUtMQogICAgICAgICAgLmNhamEtdGV4dC1pbWctdGVtYTEtYmxvcXVlMi5oLTEwMChkYXRhLWFvcz0iZmxpcC1sZWZ0IikKICAgICAgICAgICAgLmNvbC03CiAgICAgICAgICAgICAgZmlndXJlLm1iLTMKICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyL2ltZzEyLnN2ZycsIGFsdD0nJyBzdHlsZT0ibWF4LXdpZHRoOiA5NXB4IikubS1hdXRvCiAgICAgICAgICAgIGg1Lm1iLTQudGV4dC1jZW50ZXIgQW7DoWxpc2lzIGRlIGltcGFjdG8KICAgICAgICAgICAgcCBFdmFsdWFyIGNhZGEgdmFyaWFibGUgcXVlIHBvZHLDrWEgaW1wYWN0YXIgZWwgcmVuZGltaWVudG8gZGVsIGFncm9lY29zaXN0ZW1hIGRlIGFjdWVyZG8gYSBsYXMgY29uZGljaW9uZXMgbyByZXF1ZXJpbWllbnRvIGRlIHByb2R1Y2Npw7NuLgoKICAgIHAubWItNCBFeGlzdGVuIG1ldG9kb2xvZ8OtYXMgZGUgcHJpb3JpemFjacOzbiBjb21vIGxhIE1hdHJpeiBWZXN0ZXIgeSBlbCBQcm9jZXNvIGRlIEplcmFycXXDrWEgQW5hbMOtdGljYSAoQUhQKTsgc2luIGVtYmFyZ28sIGxhIG1hdHJpeiBkZSBwcmlvcml6YWNpw7NuIGVzIHNlbmNpbGxhIGRlIGFwbGljYXIgeSBzZSByZWNvbWllbmRhIHBhcmEgZWZlY3RvcyBkZWwgY3Vyc28gZGUgZm9ybWFjacOzbiwgY29tbyBzZSBwcmVzZW50YSBhIGNvbnRpbnVhY2nDs24uCgogICAgLnRpdHVsby1zZXh0by5jb2xvci1hY2VudG8tY29udGVuaWRvLm1iLTMKICAgICAgaDUgVGFibGEgMy4KICAgICAgc3BhbiBDcml0ZXJpb3MgZGUgdmFsb3JhY2nDs24gcGFyYSBtYXRyaXogZGUgcHJpb3JpemFjacOzbgogICAgCiAgICAudGFibGEtYS5hanVzdGUtdGFibGEubWItNShkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgIHRhYmxlCiAgICAgICAgdGhlYWQKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRoIENyaXRlcmlvCiAgICAgICAgICAgIHRoIERlc2NyaXBjacOzbgogICAgICAgICAgICB0aCBFc2NhbGEgZGUgdmFsb3JhY2nDs24KICAgICAgICB0Ym9keQogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgTWFnbml0dWQgKE0pCiAgICAgICAgICAgIHRkLmFqdXN0ZS1hbGlnbiDCv0N1w6FudGFzIHByw6FjdGljYXMgZGUgbWFuZWpvIGRlbCBhZ3JvZWNvc2lzdGVtYSBhZmVjdGFuIGVzdGEgdmFyaWFibGU/CiAgICAgICAgICAgIHRkIDAg4oCTIDEgPSAxIAogICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgfDIgLSAzID0gMjsgCiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8NCBvIG3DoXMgPSAzCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBHcmF2ZWRhZCAoRykKICAgICAgICAgICAgdGQuYWp1c3RlLWFsaWduIMK/Q29uIHF1w6kgZ3JhdmVkYWQvZnJlY3VlbmNpYSBhZmVjdGEgbGFzIHByw6FjdGljYXMgZGUgbWFuZWpvIGRlbCBhZ3JvZWNvc2lzdGVtYSBlc3RhIHZhcmlhYmxlPwogICAgICAgICAgICB0ZCBMZXZlbWVudGUgZ3JhdmUgPSAxCiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8TWVkaWFuYW1lbnRlIGdyYXZlID0gMgogICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgfE11eSBncmF2ZSA9IDMuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBDYXBhY2lkYWQgKEMpCiAgICAgICAgICAgIHRkLmFqdXN0ZS1hbGlnbiDCv1F1w6kgY2FwYWNpZGFkIHRlbmVtb3MgZGUgcmVzb2x2ZXIvY29ycmVnaXIgbGEgcHLDoWN0aWNhIGRlIG1hbmVqbyBkZWwgYWdyb2Vjb3Npc3RlbWEgYSBjb3J0byBwbGF6bz8KICAgICAgICAgICAgdGQgTnVsYSA9IDEKICAgICAgICAgICAgICBicgogICAgICAgICAgICAgIHxNZWRpbyA9IDIgCiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8QWx0YSA9IDMKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEJlbmVmaWNpbyAoQikKICAgICAgICAgICAgdGQuYWp1c3RlLWFsaWduIMK/Q3XDoW50byBzZSBiZW5lZmljaWEgZWwgbWVkaW9hbWJpZW50ZSBlbiBlbCBhZ3JvZWNvc2lzdGVtYSBhbCByZXNvbHZlciBvIGNvcnJlZ2lyIGxhIHByw6FjdGljYSBkZSBtYW5lam8/CiAgICAgICAgICAgIHRkIE51bGEgPSAxCiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8TWVkaW8gPSAyIAogICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgfEFsdGEgPSAzCiAgICAKICAgIC5yb3cubWItNC5oLTEwMC5hbGlnbi1pdGVtcy1jZW50ZXIuYWp1c3RlLW1vdmlsLWJsb3F1ZTQKICAgICAgLmNvbC1sZwogICAgICAgIHAgRGUgYWN1ZXJkbyBjb24gbG9zIHZhbG9yZXMgYXNpZ25hZG9zIGEgY2FkYSBjcml0ZXJpbywgbGEgaW1wb3J0YW5jaWEgZGUgbGEgdmFyaWFibGUgcHVlZGUgdmFyaWFyIGVudHJlIDIJeSAxMiB1bmlkYWRlcywgcGFyYSBsbyBjdWFsIHNlIGVzdGFibGVjZSBsYSBzaWd1aWVudGUgc2lnbmlmaWNhbmNpYToKICAgICAgICAucm93Lm0tMChkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgICAuY29sLTYuY2FqYS10ZXh0LWJsb3F1ZTQubWItMy50ZXh0LWNlbnRlcgogICAgICAgICAgICBwLm1iLTAgPHN0cm9uZz5Ub3RhbDwvc3Ryb25nPiA9IE0rRytDK0IKICAgICAgICAgIC5jb2wtNi5jYWphLXRleHQtYmxvcXVlNC5tYi0zLmRpdmlkaXItY2FqYQogICAgICAgICAgICBwLm1iLTAgPHN0cm9uZz5JbmZlcmlvcmVzIG8gaWd1YWwgYSA0PC9zdHJvbmc+OiBpbXBvcnRhbmNpYSBiYWphIEVudHJlIDQgeSA4OiBpbXBvcnRhbmNpYSBtZWRpYSBTdXBlcmlvciBhIDg6IGltcG9ydGFuY2lhIGFsdGEKICAgICAgICBwLm1iLTAgUGFyYSBtYXlvciBjb21wcmVuc2nDs24gYSBsYSBob3JhIGRlIGVsYWJvcmFyIGxhIHByaW9yaXphY2nDs24gZGUgbGFzIHZhcmlhYmxlcyBvIGNyaXRlcmlvcyBxdWUgdGllbmVuIGltcGFjdG8gZW4gZWwgYWdyb2Vjb3Npc3RlbWEsIHNlIHByZXNlbnRhIGxhIHNpZ3VpZW50ZSBtYXRyaXogZGUgcHJpb3JpemFjacOzbiwgZG9uZGUgc2UgZXZhbMO6YW4gZGlmZXJlbnRlcyBmYWN0b3JlcyBzZWfDum4gc3UgbWFnbml0dWQsIGdyYXZlZGFkLCBjYXBhY2lkYWQgZGUgbWFuZWpvIHkgYmVuZWZpY2lvIGFtYmllbnRhbC4KICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJmYWRlLXVwIikuZC1ub25lLmQteGwtYmxvY2sKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyL2ltZzE4LnBuZyIsIGFsdD0nJyBzdHlsZT0id2lkdGg6IDQ1MHB4IikubS1hdXRvCiAgICAKICAgIC50aXR1bG8tc2V4dG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tYi00CiAgICAgIGg1IEZpZ3VyYSA0LgogICAgICBzcGFuIE1hdHJpeiBkZSBwcmlvcml6YWNpw7NuCiAgICAKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tLTAubWItMShkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgIC5jb2wtbGctMTIKICAgICAgICBmaWd1cmUuYWp1c3RlLWltZy1tYXRyaXgKICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyL2ltZzE5LnN2ZycsIGFsdD0nTWF0cml6IGRlIHByaW9yaXphY2nDs24gY29uIHZhcmlhYmxlcyBhbWJpZW50YWxlcyB5IGNyaXRlcmlvcyBkZSBldmFsdWFjacOzbiwgaW5jbHV5ZW5kbyBjb250YW1pbmFjacOzbiBkZWwgc3VlbG8sIGRlZm9yZXN0YWNpw7NuIHkgZmVydGlsaWRhZC4nIHN0eWxlPSJtYXgtd2lkdGg6IDkwMHB4IikubS1hdXRvCgo="},null]}